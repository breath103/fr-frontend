/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type Post = SimplePost & {
  content: {
    blocks: (
      | {
          type: "text";
          text: string;
        }
      | {
          type: "image";
          url: string;
          width: number;
          height: number;
        }
    )[];
  };
};

export type Session = {
  token: string;
  expiresAt: number;
};

export type SessionShow = {
  data: Session;
};

export type Me = {
  id: string;
  email: string;
  nickname: string;
  emailVerification: "pending" | "verified";
};

export type MeShow = {
  data: Me;
};

export type User = {
  id: string;
  nickname: string;
};

export type UserShow = {
  data: User;
};

export type Success = {
  success: boolean;
};

export type SuccessShow = {
  data: Success;
};

export type Problem = {
  id: string;
  content: {
    type: "read-and-choose-v1";
    question: string;
    questionImage: string;
    choices: string[];
    answerIndex: number;
  };
};

export type ProblemShow = {
  data: Problem;
};

export type SimplePost = {
  id: string;
  createdAt: number;
  updatedAt: number;
  title: string;
  author: User;
};

export type SimplePostList = {
  data: SimplePost[];
  paging: {
    before?: string;
    after?: string;
  };
};

export type PostShow = {
  data: Post;
};

export type Comment = {
  id: string;
  createdAt: number;
  updatedAt: number;
  author: User;
  content: {
    text: string;
    media?: {
      type: "image";
      url: string;
      width: number;
      height: number;
    };
  };
};

export type CommentList = {
  data: Comment[];
  paging: {
    before?: string;
    after?: string;
  };
};

export type CreateUserParameter = {
  user: {
    email: string;
    password: string;
    nickname: string;
  };
};

export type GetUserParameter = {
  userId: string;
};

export type VerifyEmailParameter = {
  token: string;
};

export type CreateProblemParameter = {
  problem: {
    content: {
      type: "read-and-choose-v1";
      question: string;
      questionImage: string;
      choices: string[];
      answerIndex: number;
    };
  };
};

export type GetProblemParameter = {
  problemId: string;
};

export type CreateSessionParameter = {
  auth: {
    email: string;
    password: string;
  };
};

export type CreatePostParameter = {
  post: {
    title: string;
    boardId: "human" | "troll";
    content: {
      blocks: (
        | {
            type: "text";
            text: string;
          }
        | {
            type: "image";
            url: string;
            width: number;
            height: number;
          }
      )[];
    };
  };
};

export type GetPostsForBoardParameter = {
  boardId: "human" | "troll";
  after?: string;
  count?: number;
};

export type GetPostParameter = {
  postId: string;
  comment: {
    content: {
      text: string;
      media?: {
        type: "image";
        url: string;
        width: number;
        height: number;
      };
    };
  };
};

export type CreatePostCommentParameter = {
  postId: string;
  after?: string;
  count?: number;
};

export type GetPostCommentsParameter = {
  postId: string;
  after?: string;
  count?: number;
};
